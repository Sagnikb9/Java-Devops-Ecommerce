package com.dao;

import java.util.List;
import java.util.Properties;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.model.User;

@Repository("userDao")
public class UserDaoImpl implements UserDao {
	
	@Autowired
	SessionFactory sessionFactory;

	@Transactional
	@Override
	public boolean addUser(User user) {
		
		
		try
		{
			sessionFactory.getCurrentSession().save(user);
			
			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}

	@Transactional
	@Override
	public boolean deleteUser(User user) {
		try
		{
			sessionFactory.getCurrentSession().delete(user);
			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}

	@Transactional
	@Override
	public boolean updateUser(User user) {
		try
		{
			User userToUpdate=getUser(user.getId());
			userToUpdate.setUsername(user.getUsername());
			userToUpdate.setPassword(user.getPassword());
			userToUpdate.setEnabled(user.isEnabled());
			userToUpdate.setRole(user.getRole());
			
			
			sessionFactory.getCurrentSession().update(user);
			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}

	@Transactional
	@Override
	public List<User> retrieveUser() {
		
		Session session=sessionFactory.openSession();
		Query query=session.createQuery("from User");
		List<User>listUser=query.list();
		session.close();
		return listUser;
	}

	@Transactional
	@Override
	public User getUser(int id) {
		
		Session session=sessionFactory.openSession();
		User user=(User)session.get(User.class, id);
		session.close();
		return user;
	}

	@Transactional
	@Override
	public void Email() {
		

			/**
			   Outgoing Mail (SMTP) Server
			   requires TLS or SSL: smtp.gmail.com (use authentication)
			   Use Authentication: Yes
			   Port for TLS/STARTTLS: 587
			 */
		HttpSession session = null;	
		final String fromEmail = "donotreply.medioxypharm@gmail.com"; //requires valid gmail id
		final String password = "medioxy0139@pharm"; // correct password for gmail id
		final String toEmail = (String)session.getAttribute("username"); // can be any email id 

		System.out.println("TLSEmail Start");
		Properties props = new Properties();
		props.put("mail.smtp.host", "smtp.gmail.com"); //SMTP Host
		props.put("mail.smtp.port", "587"); //TLS Port
		props.put("mail.smtp.auth", "true"); //enable authentication
		props.put("mail.smtp.starttls.enable", "true"); //enable STARTTLS

		        //create Authenticator object to pass in Session.getInstance argument
		Authenticator auth = new Authenticator() {
			//override the getPasswordAuthentication method
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(fromEmail, password);
			}
		};
		Session session2 = Session.getInstance(props, auth);
		
		
			   }
		 
		
	

}
